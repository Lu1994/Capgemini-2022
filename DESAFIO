# Questão 
> :construction: Projeto em construção :constructio


Escreva um algoritmo que mostre na tela uma escada de tamanho n utilizando o caractere * e espaços. A base e altura da escada devem ser iguais ao valor de n. A última linha não deve conter nenhum espaço.
=
Scanner entrada = new Scanner(System.in);

List<String> degraus = new ArrayList<>();

System.out.print("Digite a quantidade de vezes: ");

int qtdDegraus = entrada.nextInt();

for (int i = 0; i < qtdDegraus; i++) {

degraus.add(" ".repeat(qtdDegraus - i) + "*".repeat(i + 1));

}

for (String d : degraus ) {

System.out.println(d);

}





# Questão 02

Débora se inscreveu em uma rede social para se manter em contato com seus amigos. A página de cadastro exigia o preenchimento dos campos de nome e senha, porém a senha precisa ser forte. O site considera uma senha forte quando ela satisfaz os seguintes critérios:
=
Entrada:

Ya3

 

Saída:

3

 

Explicação:

Ela pode tornar a senha segura adicionando 3 caracteres, por exemplo, &ab, transformando a senha em Ya3&ab. 2 caracteres não são suficientes visto que a senha precisa ter um tamanho mínimo de 6 caracteres.



# Questão 03
Duas palavras podem ser consideradas anagramas de si mesmas se as letras de uma palavra podem ser realocadas para formar a outra palavra. Dada uma string qualquer, desenvolva um algoritmo que encontre o número de pares de substrings que são anagramas.


=


Exemplo 1)

 

Entrada:

ovo

 

Saída:

3

 

Explicação:

A lista de todos os anagramas pares são: [o, o], [ov, vou] que estão nas posições [[0, 2], [0, 1], [1, 2]] respectivamente. 

 

Exemplo 2)

 

Entrada:

ifailuhkqq

 

Saída:

3

 

Explicação:

A lista de todos os anagramas pares são: [i, i], [q, q] e [ifa, fai] que estão nas posições [[0, 3]], [[8, 9]] e [[0, 1, 2], [1, 2, 3]].
